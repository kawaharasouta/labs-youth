
カーネルモジュール
===================


カーネルモジュールは，カーネルに機能追加する最も簡単な手段です．
デバイスドライバに限らず今後様々な場面でカーネルモジュールを扱う場面があるはずです．
ここではネットワークドライバを実装する上で最低限必要な情報のみを載せるため，
よりしっかりとした入門記事を読みたい場合は `カーネルモジュール作成で学ぶLinuxカーネル開発の基礎知識 <https://windhole.booth.pm/items/1169009>`_ をお勧めします．



すでに活用されているカーネルモジュール
---------------------------------------


カーネルモジュールは，カーネルに機能を使いする最も簡単な手段であるため，多くのところで利用されています．
手元の起動直後のマシンにも様々なカーネルモジュールがすでにロードされています．
すでにロードされているモジュールを確認します．

:: 
  
  $ lspci 

とすると非常に多くのモジュールがすでにロードされていることがわかります．
目的のカーネルモジュールがロードされているかどうか知りたいときはgrepを使うと良いです．
せっかくですからすでに動いているネットワークドライバを見てみたいと思います．

ipコマンドでインタフェース名を調べます．

::

  $ ip -br link 

  lo               UNKNOWN        00:00:00:00:00:00 <LOOPBACK,UP,LOWER_UP>
  ens3             UP             52:54:00:55:96:ed <BROADCAST,MULTICAST,UP,LOWER_UP>
  enp1s3           DOWN           52:54:00:40:09:3d <BROADCAST,MULTICAST>

ethtoolでインタフェースを指定して情報を調べます．

::
 
  $ ethtool -i enp1s3
  driver: e1000
  ...

*driver:* の部分がそのインタフェースのドライバ名に当たるので
この場合は *e1000* というドライバが使われていることになります．
先ほどのlspciの結果をgrepしてみると

:: 

  $ lspci | grep e1000
  e1000

という結果が得られます．

では，このモジュールをアンロードしてみたいと思います．
*sshしている方やなんらかのサービスを動かしているマシン上でやる際は注意してください*

:: 

  $ sudo rmmod e1000

ipコマンドでインタフェースを確認してみると

::

  $ ip -br link 
  lo               UNKNOWN        00:00:00:00:00:00 <LOOPBACK,UP,LOWER_UP>
  ens3             UP             52:54:00:55:96:ed <BROADCAST,MULTICAST,UP,LOWER_UP>

先ほど見たインタフェースが消えていることがわかります．
(環境によっては複数のインタフェースが消えるかもしれません)

戻すにはmodprobeコマンドを使います
(rmmodに対応するロードのコマンドはinsmodですがここではmodprobeを使います．あとで説明があります．)

::

  $ sudo modprobe e1000

インタフェースを確認すると元に戻っていると思います．


カーネルモジュールはどこにあってどうやってロードされてコードはどこにあるんだみたいな話
----------------------------------------------------------------------------------------

このぐらいまで来たとき筆者は思いました．起動したら知らないモジュールが勝手にロードされてるけど，
それってどこにあってどうやってロードされてコードはどこにあってコードはどこにあるんだ．

まずはコードの場所ですが，ビルドした後の初回起動時には既に勝手にロードされているわけですから，
ビルド時には既に同封されていたと考えるとカーネルの中に既にコードが存在していると考えるのが妥当だと思いますので
カーネルのコードを見て見たいと思います．カーネルのコードを見る際には `こちら <https://elixir.bootlin.com/linux/v4.15/source>`_ がおすすめです．
ここではqemuとかglibcとか他にも先人の叡智の結晶ともいうべきコードが参照できるので
ぼんやり眺めると世界の大きさを痛感できてとても良いです．
探して見ると， */drivers/net/ethernet/intel/e1000/* というディレクトリがあることが確認できると思います．
コードはその中にあります． 

次はドライバの実態です．
ドライバの実態は */lib/modules/[バージョン]/kernel/drivers/net/ethernet/intel/e1000/e1000.ko* にあります．
拡張子の.koはカーネルモジュールであることを示します．
おそらくカーネルのビルド時に一緒にビルドされてここに配置されるのだと思います．

続いてロードのされ方ですが，いくつかに分けて話をしたいと思います．

カーネルモジュールの依存関係
`````````````````````````````

カーネルモジュールは別のモジュールの中に組み込まれてちょうどライブラリのような使われ方をするようなモジュールもあります．
例えば今，Aというカーネルモジュールがあったとして，その中でBというカーネルモジュールの機能が中で使われていたとしましょう．
この場合，AはBのモジュールが間違いなくロードされている必要があります．このようにカーネルモジュールには依存関係がある場合があります．

先ほどe1000モジュールをロードする際にmodprobeというコマンドを用いましたが，
このコマンドはモジュールの依存関係を解決し，モジュールをロードしてくれる機能があります．ちょうどパッケージ管理ソフトウェアのような働きをします．
ですのでモジュールのロードは基本的にはmodprobeで行います．ちなみにアンロードもmodprobe -rで行えます．
insmodは依存関係の解決は行わず，依存しているモジュールが見つからない場合はエラーになります．
依存関係は~~~~~に書き込まれています．解決は~~~~~で行うことができます．

modprobeするときパス指定してないけど
`````````````````````````````````````

カーネルモジュールには所定の配置場所があります．
場所~~~~~~~~~~
ここに配置されているモジュールはmodprobeでパス指定なくロードできます．
モジュールを自作してそれを使用する際もここに配置すると良いです．




